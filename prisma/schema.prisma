generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// User model: Users who interact with the Kanban board
model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  passwordHash String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Board     Board[]  // Relation to boards the user owns

  @@map("users")
}

// Board model: Represents a Kanban board
model Board {
  id        String     @id @default(uuid())
  name      String
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Columns   Column[]   // Relation to columns on the board

  @@map("boards")
}

// Column model: Represents a column in the Kanban board (e.g., "To Do", "In Progress")
model Column {
  id        String     @id @default(uuid())
  name      String
  boardId   String
  board     Board      @relation(fields: [boardId], references: [id], onDelete: Cascade)
  order     Int        // Determines the order of columns in the board
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Cards     Card[]     // Relation to cards in the column

  @@map("columns")
}

// Card model: Represents tasks/cards in a column
model Card {
  id          String    @id @default(uuid())
  title       String
  description String?
  columnId    String
  column      Column    @relation(fields: [columnId], references: [id], onDelete: Cascade)
  order       Int       // Determines the order of cards in the column
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("cards")
}
